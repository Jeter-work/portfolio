---
- name: Include OS-specific variables
  ansible.builtin.include_vars:
    file: "rocky.yml"
  when: ansible_distribution == "Rocky"

- name: Update package cache
  ansible.builtin.dnf:
    update_cache: yes
  when: ansible_os_family == "RedHat"

- name: Install EPEL repository
  ansible.builtin.dnf:
    name: epel-release
    state: present

- name: Install prerequisites
  ansible.builtin.dnf:
    name: "{{ pihole_packages }}"
    state: present
  when: ansible_distribution == "Rocky"

- name: Check if Pi-hole is installed
  ansible.builtin.stat:
    path: /usr/local/bin/pihole
  register: pihole_binary

- name: Download Pi-hole installer
  ansible.builtin.get_url:
    url: https://install.pi-hole.net
    dest: /tmp/pihole.sh
    mode: '0755'
  when: not pihole_binary.stat.exists

- name: Create Pi-hole configuration directory
  ansible.builtin.file:
    path: /etc/pihole
    state: directory
    mode: '0755'
  when: not pihole_binary.stat.exists

- name: Run Pi-hole installer
  ansible.builtin.shell:
    cmd: source /etc/environment && bash /tmp/pihole.sh --unattended
  args:
    creates: /usr/local/bin/pihole
    executable: /bin/bash
  when: not pihole_binary.stat.exists
  environment:
    PIHOLE_SELINUX: "true"
    PIHOLE_SKIP_OS_CHECK: "true"
  notify: restart after install

- name: Configure Pi-hole settings
  ansible.builtin.template:
    src: setupVars.conf.j2
    dest: /etc/pihole/setupVars.conf
    mode: '0644'
  register: pihole_config
  notify: reload pihole config

- name: Debug Pi-hole configuration
  ansible.builtin.debug:
    var: pihole_config

- name: Update Pi-hole if already installed
  ansible.builtin.command:
    cmd: /usr/local/bin/pihole updatePihole
  when: pihole_binary.stat.exists
  changed_when: false  # Since pihole -up doesn't provide useful changed status
  register: pihole_update

- name: Check if Pi-hole update was successful
  ansible.builtin.debug:
    msg: "Pi-hole update was successful"
  when: pihole_update.rc == 0

- name: Clean up installer
  ansible.builtin.file:
    path: /tmp/pihole.sh
    state: absent

- name: Get Pi-hole version
  ansible.builtin.command:
    cmd: /usr/local/bin/pihole -v
  register: pihole_version
  changed_when: false
  check_mode: false
  when: pihole_binary.stat.exists

- name: Display Pi-hole version
  ansible.builtin.debug:
    msg: "{{ pihole_version.stdout_lines }}"
  when: pihole_binary.stat.exists

- name: Configure firewall
  ansible.builtin.include_tasks: firewall.yml
  when: ansible_os_family == "RedHat"

- name: Configure SELinux
  ansible.builtin.include_tasks: selinux.yml
  when: ansible_os_family == "RedHat"